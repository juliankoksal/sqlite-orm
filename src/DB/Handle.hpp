//
//  Handle.hpp
//  SQLite3 Data Access Layer
//
//  Created by Julian Koksal on 2023-02-12.
//

#ifndef Handle_hpp
#define Handle_hpp

#include <algorithm>
#include <cstdint>
#include <map>
#include <set>
#include <string>
#include <typeinfo>
#include <vector>

#include <sqlite3.h>

#include "Condition.hpp"
#include "Datatype.hpp"
#include "Object.hpp"
#include "OP.hpp"

namespace DB
{

/**
 * @brief Represents a database connection. Provides CRUD operations.
 */
class Handle
{
public:
    /**
     * @brief Constructor. Opens the database handle.
     *
     * @param fileName name of the database file
     */
    Handle(const std::string fileName);
    
    /**
     * @brief Copy constructor deleted to prevent copying a DB connection.
     */
    Handle(const Handle& other) = delete;
    
    /**
     * @brief Destructor. Closes the database handle.
     */
    ~Handle();
    
    /**
     * @brief Copy assignment deleted to prevent copying a DB connection.
     */
    Handle& operator=(const Handle& other) = delete;
    
    /**
     * @brief Gets rows from the dbObject table as a vector.
     *
     * Conditions, sorting, and projection can be specified with the parameters, but are optional.
     * If no optional parameters are given, returns all rows and columns of the table unsorted.
     *
     * @param dbObject must inherit from DB::Object, used to determine the table name, column names and types, and to cast the results
     * @param conditions conditions for the WHERE clause of the SELECT statement
     * @param orderBy field and direction for the ORDER BY clause of the select statement. e.g. "price DESC"
     * @param columns set of column names to select. If empty, all columns are selected
     *
     * @return results of the SELECT statement, casted to T
     */
    template<class T, class = std::enable_if<std::is_base_of<Object, T>::value>>
    std::vector<T> select(const T&& dbObject,
                          const std::vector<Condition>& conditions = {},
                          const std::string& orderBy = "",
                          const std::set<std::string>& columns = {})
    {
        const std::vector<Object*> helperResult = selectHelper(dbObject,
                                                               conditions,
                                                               orderBy,
                                                               columns);
        std::vector<T> result;
        for (auto it = helperResult.begin(); it != helperResult.end(); ++it)
        {
            T* row = (T*)(*it);
            result.push_back(*row);
            delete row;
        }
        return result;
    }
    
    /**
     * @brief Inserts the given object to its associated table in the database.
     *
     * @param dbObject object to insert to the database
     *
     * @return key of the inserted record if it has an autogenerated INTEGER PRIMARY KEY, 0 otherwise
     */
    std::int64_t insert(const Object& dbObject) const;
    
    /**
     * @brief Updates the given object in the database, identified by its primary key(s).
     *
     * Updates the row in the table with PRIMARY KEY(s) that match the key(s) of object.
     * All columns are updated to the corresponding values of object.
     *
     * @param dbObject object to update
     */
    void update(const Object& dbObject) const;
    
    /**
     * @brief Conditionally updates the dbObject table with the values of dbObject.
     *
     * Updates all rows in the table that match conditions to have the values of dbObject.
     * Only columns given in the columns parameter are updated.
     * If the columns parameter is empty, all columns are updated.
     *
     * @param conditions conditions for the WHERE clause of the SELECT statement
     * @param columns set of column names to update, if empty, all columns are updated
     */
    void updateWhere(const Object& dbObject,
                     const std::vector<Condition>& conditions,
                     const std::set<std::string>& columns) const;

    /**
     * @brief Deletes the given object from the database, identified by its primary key(s).
     *
     * Deletes the row in the table with PRIMARY KEY(s) that match the key(s) of object.
     *
     * @param dbObject object to delete
     */
    void destroy(const Object& dbObject) const;

    /**
     * @brief Conditionally deletes from dbObject table.
     *
     * Deletes ALL rows in the table that match conditions.
     *
     * @param conditions conditions for the WHERE clause of the SELECT statement
     */
    void destroyWhere(const Object& dbObject,
                      const std::vector<Condition>& conditions) const;
    
private:
    /**
     * @brief SQLite3 database handle.
     */
    sqlite3* db;
    
    /**
     * @brief Gets rows from the dbObject table as a vector.
     *
     * Conditions, sorting, and projection can be specified with the parameters, but are optional.
     * If no optional parameters are given, returns all rows and columns of the table unsorted.
     *
     * @param dbObject used to determine the table name, column names and types
     * @param conditions conditions for the WHERE clause of the SELECT statement
     * @param orderBy ORDER BY clause of the select statement
     * @param columns the set of column names to select, if empty, all columns are selected
     *
     * @return results of the SELECT statement
     */
    std::vector<Object*> selectHelper(const Object& dbObject,
                                      const std::vector<Condition>& conditions,
                                      const std::string &orderBy,
                                      const std::set<std::string>& columns) const;
    
    /**
     * @brief Prepares a sqlite3 statement from the given query.
     *
     * @param query query used to prepare the statement
     */
    sqlite3_stmt* prepareStatement(const std::string& query) const;
    
    /**
     * @brief Binds values of the dbObject to the statement, starting at index.
     *
     * @param statement statement to bind
     * @param dbObject object to get values from
     * @param columns names of the columns to bind the values of
     * @param index statement parameter index
     * @param isInsert is the statement an INSERT query
     */
    void bindStatementColumns(sqlite3_stmt* statement, const Object& dbObject,
                              const std::vector<std::string>& columns,
                              int& index, const bool isInsert = false) const;
    
    /**
     * @brief Iterates the conditions and binds their values to the statement, starting at index.
     *
     * Index is incremented with each iteration to allow multiple uses of bind statement methods on the same statement.
     *
     * @param statement the sqlite3 statement to bind
     * @param conditions the conditions to bind the values of
     * @param index the sqlite3 statement parameter index
     */
    void bindStatementConditions(sqlite3_stmt* statement,
                                 const std::vector<Condition>& conditions,
                                 int& index) const;
    
    /**
     * @brief Finalizes the statement.
     *
     * @param statement statement to finalize
     * @param errorMessage message printed if an error occurred when the statement was run
     */
    void finalizeStatement(sqlite3_stmt *statement,
                           const std::string& errorMessage) const;
    
    /**
     * @brief Opens the database handle.
     *
     * @param fileName name of the database file
     */
    void openDB(const std::string fileName);
    
    /**
     * @brief Closes the database handle.
     */
    void closeDB();
    
    /**
     * @brief Generates the WHERE clause of a query from conditions.
     *
     * @param conditions iterated to generate the WHERE clause
     *
     * @return WHERE clause of a query
     */
    static std::string generateWhereClauseFromConditions(const std::vector<Condition>& conditions);
    
    /**
     * @brief Generates the WHERE clause of a query from keys.
     *
     * @param keys iterated to generate the WHERE clause
     *
     * @return WHERE clause of a query
     */
    static std::string generateWhereClauseFromKeys(const std::vector<std::string>& keys);
};

}

#endif /* Handle_hpp */
